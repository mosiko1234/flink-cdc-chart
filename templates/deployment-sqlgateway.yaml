# templates/deployment-sqlgateway.yaml
---
{{- if .Values.sqlGateway.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "flink-cdc.fullname" . }}-sqlgateway
  labels:
    {{- include "flink-cdc.labels" . | nindent 4 }}
    app.kubernetes.io/component: sqlgateway
spec:
  replicas: {{ .Values.sqlGateway.replicas }}
  selector:
    matchLabels:
      {{- include "flink-cdc.sqlgateway.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "flink-cdc.sqlgateway.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "flink-cdc.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      containers:
        - name: sqlgateway
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem }}
          args: ["sql-gateway"]
          env:
            - name: FLINK_CONF_DIR
              value: /opt/flink/conf
            - name: MSSQL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecrets.mssqlCredentials.name }}
                  key: {{ .Values.existingSecrets.mssqlCredentials.usernameKey }}
            - name: MSSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecrets.mssqlCredentials.name }}
                  key: {{ .Values.existingSecrets.mssqlCredentials.passwordKey }}
            - name: MINIO_ENDPOINT
              value: {{ .Values.externalServices.minio.endpoint | quote }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecrets.minioCredentials.name }}
                  key: {{ .Values.existingSecrets.minioCredentials.accessKeyKey }}
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecrets.minioCredentials.name }}
                  key: {{ .Values.existingSecrets.minioCredentials.secretKeyKey }}
            {{- range .Values.extraEnvVars }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          ports:
            - containerPort: {{ .Values.sqlGateway.port }}
              name: sql
          livenessProbe:
            httpGet:
              path: /info
              port: {{ .Values.sqlGateway.port }}
            initialDelaySeconds: 30
            periodSeconds: 60
          readinessProbe:
            httpGet:
              path: /info
              port: {{ .Values.sqlGateway.port }}
            initialDelaySeconds: 30
            periodSeconds: 10
          resources:
            {{- toYaml .Values.sqlGateway.resources | nindent 12 }}
          volumeMounts:
            - name: flink-config-volume
              mountPath: /opt/flink/conf
            - name: flink-lib
              mountPath: /opt/flink/lib
            - name: flink-log
              mountPath: /opt/flink/log
      volumes:
        - name: flink-config-volume
          configMap:
            name: {{ include "flink-cdc.fullname" . }}-config
            items:
              - key: flink-conf.yaml
                path: flink-conf.yaml
              - key: log4j-console.properties
                path: log4j-console.properties
        - name: flink-lib
          emptyDir: {}
        - name: flink-log
          emptyDir: {}
{{- end }}
---