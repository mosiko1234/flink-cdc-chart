# Modified bootstrap-job.yaml to support CDC Gateway
---
{{- if .Values.bootstrap.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "flink-cdc.fullname" . }}-bootstrap
  labels:
    {{- include "flink-cdc.labels" . | nindent 4 }}
spec:
  backoffLimit: 6
  ttlSecondsAfterFinished: 600
  template:
    metadata:
      labels:
        {{- include "flink-cdc.labels" . | nindent 8 }}
        app.kubernetes.io/component: bootstrap
    spec:
      restartPolicy: OnFailure
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "flink-cdc.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      containers:
        - name: bootstrap
          image: "{{ .Values.bootstrap.image.repository }}:{{ .Values.bootstrap.image.tag }}"
          imagePullPolicy: {{ .Values.bootstrap.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          command:
            - "/bin/sh"
            - "-c"
            - |
              {{- if .Values.bootstrap.useCdcGateway }}
              # Use CDC Gateway when enabled
              CDC_GATEWAY_SERVICE={{ include "flink-cdc.fullname" . }}-cdcgateway
              CDC_GATEWAY_PORT={{ .Values.cdcGateway.port }}
              
              echo "Waiting for CDC Gateway to be ready..."
              until curl -s http://${CDC_GATEWAY_SERVICE}:${CDC_GATEWAY_PORT}/health > /dev/null; do
                sleep 5
              done
              
              echo "CDC Gateway is ready, setting up connectors and pipeline..."
              
              {{- if .Values.restoreFromSavepoint }}
              SAVEPOINT_OPTION="savepoint={{ .Values.restoreFromSavepoint }}"
              {{- else }}
              SAVEPOINT_OPTION=""
              {{- end }}
              
              # Create CDC source connector through API
              curl -s -X POST "http://${CDC_GATEWAY_SERVICE}:${CDC_GATEWAY_PORT}/api/v1/connectors" \
                -H "Content-Type: application/json" \
                -d '{
                  "name": "mssql-source",
                  "type": "sqlserver-cdc",
                  "config": {
                    "hostname": "${MSSQL_SERVER}",
                    "port": "${MSSQL_PORT}",
                    "username": "${MSSQL_USERNAME}",
                    "password": "${MSSQL_PASSWORD}",
                    "database-name": "${MSSQL_DATABASE}",
                    "table-name": "source_table",
                    "database-history": "memory",
                    "include-schema-changes": "true"
                  }
                }'
              
              # Create Kafka sink connector through API
              curl -s -X POST "http://${CDC_GATEWAY_SERVICE}:${CDC_GATEWAY_PORT}/api/v1/connectors" \
                -H "Content-Type: application/json" \
                -d '{
                  "name": "kafka-sink",
                  "type": "kafka",
                  "config": {
                    "bootstrapServers": "${KAFKA_BROKERS}",
                    "topic": "sink_topic",
                    "format": "json"
                  }
                }'
              
              # Create pipeline to connect source to sink
              curl -s -X POST "http://${CDC_GATEWAY_SERVICE}:${CDC_GATEWAY_PORT}/api/v1/pipelines" \
                -H "Content-Type: application/json" \
                -d '{
                  "name": "mssql-to-kafka",
                  "source": "mssql-source",
                  "sink": "kafka-sink",
                  "parallelism": 2,
                  "transformations": [],
                  "options": {
                    "${SAVEPOINT_OPTION}"
                  }
                }'
                
              echo "Pipeline deployed successfully through CDC Gateway"
              
              {{- else }}
              # Fall back to SQL Gateway when CDC Gateway is not used
              SQLGATEWAY_SERVICE={{ include "flink-cdc.fullname" . }}-sqlgateway
              SQLGATEWAY_PORT={{ .Values.sqlGateway.port }}
              
              echo "Waiting for SQL Gateway to be ready..."
              until curl -s http://${SQLGATEWAY_SERVICE}:${SQLGATEWAY_PORT}/info > /dev/null; do
                sleep 5
              done
              
              echo "SQL Gateway is ready, submitting job..."
              
              {{- if .Values.restoreFromSavepoint }}
              SAVEPOINT_OPTION="-d?savepoint.path={{ .Values.restoreFromSavepoint }}"
              {{- else }}
              SAVEPOINT_OPTION=""
              {{- end }}
              
              JOB_SQL=$(cat /sql/job.sql)
              
              # Create session
              SESSION_HANDLE=$(curl -s -X POST http://${SQLGATEWAY_SERVICE}:${SQLGATEWAY_PORT}/v1/sessions \
                -H "Content-Type: application/json" \
                -d '{"sessionName":"bootstrap-session"}' | jq -r '.sessionHandle')
              
              if [ -z "$SESSION_HANDLE" ] || [ "$SESSION_HANDLE" = "null" ]; then
                echo "Failed to create session"
                exit 1
              fi
              
              echo "Session created with handle: $SESSION_HANDLE"
              
              # Execute SQL statements
              curl -s -X POST "http://${SQLGATEWAY_SERVICE}:${SQLGATEWAY_PORT}/v1/sessions/${SESSION_HANDLE}/statements" \
                -H "Content-Type: application/json" \
                -d "{\"statement\":\"${JOB_SQL}\"${SAVEPOINT_OPTION}}"
              
              echo "Job submitted successfully"
              
              # Close session
              curl -s -X DELETE "http://${SQLGATEWAY_SERVICE}:${SQLGATEWAY_PORT}/v1/sessions/${SESSION_HANDLE}"
              {{- end }}
          resources:
            {{- toYaml .Values.bootstrap.resources | nindent 12 }}
          volumeMounts:
            - name: sql-volume
              mountPath: /sql
      volumes:
        - name: sql-volume
          configMap:
            name: {{ include "flink-cdc.fullname" . }}-config
            items:
              - key: job.sql
                path: job.sql
{{- end }}