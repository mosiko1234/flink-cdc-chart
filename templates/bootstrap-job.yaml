# templates/bootstrap-job.yaml
---
{{- if .Values.bootstrap.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "flink-cdc.fullname" . }}-bootstrap
  labels:
    {{- include "flink-cdc.labels" . | nindent 4 }}
spec:
  backoffLimit: {{ .Values.bootstrap.retries }}
  ttlSecondsAfterFinished: 600
  template:
    metadata:
      labels:
        {{- include "flink-cdc.labels" . | nindent 8 }}
        app.kubernetes.io/component: bootstrap
      annotations:
        openshift.io/scc: restricted
    spec:
      restartPolicy: OnFailure
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "flink-cdc.serviceAccountName" . }}
      containers:
        - name: bootstrap
          image: "{{ .Values.bootstrap.image.repository }}:{{ .Values.bootstrap.image.tag }}"
          imagePullPolicy: {{ .Values.bootstrap.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
          command:
            - "/bin/sh"
            - "-c"
            - |
              {{- if .Values.bootstrap.useCdcGateway }}
              # Use CDC Gateway when enabled
              CDC_GATEWAY_SERVICE={{ include "flink-cdc.fullname" . }}-cdcgateway
              CDC_GATEWAY_PORT={{ .Values.cdcGateway.port }}
              
              echo "Waiting for CDC Gateway to be ready..."
              until curl -s http://${CDC_GATEWAY_SERVICE}:${CDC_GATEWAY_PORT}/health > /dev/null; do
                echo "Waiting for CDC Gateway... retrying in {{ .Values.bootstrap.backoffSeconds }} seconds"
                sleep {{ .Values.bootstrap.backoffSeconds }}
              done
              
              echo "CDC Gateway is ready, loading pipelines..."
              
              # Get pipelines from the pipeline definition file
              curl -s -X POST http://${CDC_GATEWAY_SERVICE}:${CDC_GATEWAY_PORT}/api/v1/pipelines/import \
                -H "Content-Type: application/json" \
                -d @/pipelines/pipeline-definitions.json
              
              echo "Pipelines loaded successfully"
              
              # Wait for pipelines to be successfully running
              echo "Waiting for pipelines to be successfully running..."
              sleep 10
              
              # Check pipeline status
              PIPELINE_STATUS=$(curl -s http://${CDC_GATEWAY_SERVICE}:${CDC_GATEWAY_PORT}/api/v1/pipelines | jq -r '.[].status')
              echo "Pipeline statuses: ${PIPELINE_STATUS}"
              
              {{- else }}
              # Fall back to SQL Gateway when CDC Gateway is not used
              SQLGATEWAY_SERVICE={{ include "flink-cdc.fullname" . }}-sqlgateway
              SQLGATEWAY_PORT={{ .Values.sqlGateway.port }}
              
              echo "Waiting for SQL Gateway to be ready..."
              until curl -s http://${SQLGATEWAY_SERVICE}:${SQLGATEWAY_PORT}/info > /dev/null; do
                echo "Waiting for SQL Gateway... retrying in {{ .Values.bootstrap.backoffSeconds }} seconds"
                sleep {{ .Values.bootstrap.backoffSeconds }}
              done
              
              echo "SQL Gateway is ready, submitting SQL jobs..."
              
              # Submit SQL jobs for each pipeline defined in values.yaml
              {{- range .Values.pipelines }}
              {{- if .enabled }}
              
              # Create SQL for {{ .name }}
              cat > /tmp/{{ .name }}.sql << EOF
              CREATE TABLE {{ .source.table | replace "." "_" }}_source (
                  id INT,
                  -- Add more fields as needed
                  PRIMARY KEY (id) NOT ENFORCED
              ) WITH (
                  'connector' = '{{ .source.type }}',
                  'hostname' = '{{ $.Values.externalServices.mssql.host }}',
                  'port' = '{{ $.Values.externalServices.mssql.port }}',
                  'username' = '\${MSSQL_USERNAME}',
                  'password' = '\${MSSQL_PASSWORD}',
                  'database-name' = '{{ $.Values.externalServices.mssql.database }}',
                  'table-name' = '{{ .source.table }}'
                  {{- range $key, $value := .source.options }}
                  ,'{{ $key }}' = '{{ $value }}'
                  {{- end }}
              );
              
              CREATE TABLE {{ .sink.topic | replace "." "_" }}_sink (
                  id INT,
                  -- Add more fields as needed
                  PRIMARY KEY (id) NOT ENFORCED
              ) WITH (
                  'connector' = 'kafka',
                  'topic' = '{{ .sink.topic }}',
                  'properties.bootstrap.servers' = '{{ $.Values.externalServices.kafka.brokers }}'
                  {{- range $key, $value := .sink.options }}
                  ,'{{ $key }}' = '{{ $value }}'
                  {{- end }}
              );
              
              INSERT INTO {{ .sink.topic | replace "." "_" }}_sink
              SELECT * FROM {{ .source.table | replace "." "_" }}_source;
              EOF
              
              # Submit the SQL job
              curl -s -X POST http://${SQLGATEWAY_SERVICE}:${SQLGATEWAY_PORT}/v1/sessions \
                -H "Content-Type: application/json" \
                -d '{"sessionName":"{{ .name }}-session"}' | \
              SESSION_HANDLE=$(jq -r '.sessionHandle')
              
              if [ -z "$SESSION_HANDLE" ] || [ "$SESSION_HANDLE" = "null" ]; then
                  echo "Failed to create session for {{ .name }}"
                  exit 1
              fi
              
              echo "Session created for {{ .name }} with handle: $SESSION_HANDLE"
              
              # Execute SQL statements
              curl -s -X POST "http://${SQLGATEWAY_SERVICE}:${SQLGATEWAY_PORT}/v1/sessions/${SESSION_HANDLE}/statements" \
                -H "Content-Type: application/json" \
                -d "{\"statement\":\"$(cat /tmp/{{ .name }}.sql | tr '\n' ' ')\"}"
              
              echo "Job submitted for {{ .name }}"
              
              {{- end }}
              {{- end }}
              
              {{- end }}
          resources:
            {{- toYaml .Values.bootstrap.resources | nindent 12 }}
          volumeMounts:
            - name: pipeline-definitions
              mountPath: /pipelines
            - name: flink-tmp
              mountPath: /tmp
      volumes:
        - name: pipeline-definitions
          configMap:
            name: {{ include "flink-cdc.fullname" . }}-config
            items:
              - key: pipeline-definitions.json
                path: pipeline-definitions.json
        - name: flink-tmp
          emptyDir: {}
{{- end }}
---