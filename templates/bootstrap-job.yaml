{{- if .Values.bootstrap.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "flink-cdc.fullname" . }}-bootstrap
  labels:
    {{- include "flink-cdc.labels" . | nindent 4 }}
spec:
  backoffLimit: {{ .Values.bootstrap.retries }}
  ttlSecondsAfterFinished: 600
  template:
    metadata:
      labels:
        {{- include "flink-cdc.labels" . | nindent 8 }}
        app.kubernetes.io/component: bootstrap
      annotations:
        openshift.io/scc: restricted
    spec:
      restartPolicy: OnFailure
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "flink-cdc.serviceAccountName" . }}
      containers:
        - name: bootstrap
          image: "{{ .Values.bootstrap.image.repository }}:{{ .Values.bootstrap.image.tag }}"
          imagePullPolicy: {{ .Values.bootstrap.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          command:
            - "/bin/sh"
            - "-c"
            - |
              # Wait for services to be ready
              echo "Waiting 30 seconds for services to initialize..."
              sleep 30
              
              {{- if .Values.bootstrap.useCdcGateway }}
              # Use CDC Gateway when enabled
              CDC_GATEWAY_SERVICE={{ include "flink-cdc.fullname" . }}-cdcgateway
              CDC_GATEWAY_PORT={{ .Values.cdcGateway.port }}
              
              echo "Waiting for CDC Gateway to be ready..."
              for i in $(seq 1 30); do
                if curl -s http://${CDC_GATEWAY_SERVICE}:${CDC_GATEWAY_PORT}/health > /dev/null; then
                  echo "CDC Gateway is ready!"
                  break
                fi
                if [ $i -eq 30 ]; then
                  echo "CDC Gateway not ready after 30 attempts. Exiting."
                  exit 1
                fi
                echo "Waiting for CDC Gateway... retry $i/30"
                sleep 10
              done
              
              echo "Loading pipelines through CDC Gateway..."
              curl -v -X POST http://${CDC_GATEWAY_SERVICE}:${CDC_GATEWAY_PORT}/api/v1/pipelines/import \
                -H "Content-Type: application/json" \
                -d @/pipelines/pipeline-definitions.json
              
              echo "Checking pipeline status..."
              curl http://${CDC_GATEWAY_SERVICE}:${CDC_GATEWAY_PORT}/api/v1/pipelines
              
              {{- else }}
              # Fall back to SQL Gateway when CDC Gateway is not used
              SQLGATEWAY_SERVICE={{ include "flink-cdc.fullname" . }}-sqlgateway
              SQLGATEWAY_PORT={{ .Values.sqlGateway.port }}
              
              echo "Waiting for SQL Gateway to be ready..."
                            for i in $(seq 1 30); do
                              if curl -s http://${SQLGATEWAY_SERVICE}:${SQLGATEWAY_PORT}/info > /dev/null; then
                                echo "SQL Gateway is ready!"
                                break
                              fi
                              if [ $i -eq 30 ]; then
                                echo "SQL Gateway not ready after 30 attempts. Exiting."
                                exit 1
                              fi
                              echo "Waiting for SQL Gateway... retry $i/30"
                              sleep 10
                            done

                            echo "SQL Gateway is ready, submitting SQL jobs..."

                            # Submit SQL jobs for each pipeline defined in values.yaml
                            {{- range .Values.pipelines }}
                            {{- if .enabled }}

                            # Create SQL for {{ .name }}
                            cat > /tmp/{{ .name }}.sql << EOF
                            CREATE TABLE {{ .source.table | replace "." "_" }}_source (
                                id INT,
                                -- Add more fields as needed
                                PRIMARY KEY (id) NOT ENFORCED
                            ) WITH (
                                'connector' = '{{ .source.type }}',
                                'hostname' = '{{ $.Values.externalServices.mssql.host }}',
                                'port' = '{{ $.Values.externalServices.mssql.port }}',
                                'username' = '\${MSSQL_USERNAME}',
                                'password' = '\${MSSQL_PASSWORD}',
                                'database-name' = '{{ $.Values.externalServices.mssql.database }}',
                                'table-name' = '{{ .source.table }}'
                                {{- range $key, $value := .source.options }}
                                ,'{{ $key }}' = '{{ $value }}'
                                {{- end }}
                            );

                            CREATE TABLE {{ .sink.topic | replace "." "_" }}_sink (
                                id INT,
                                -- Add more fields as needed
                                PRIMARY KEY (id) NOT ENFORCED
                            ) WITH (
                                'connector' = 'kafka',
                                'topic' = '{{ .sink.topic }}',
                                'properties.bootstrap.servers' = '{{ $.Values.externalServices.kafka.brokers }}'
                                {{- range $key, $value := .sink.options }}
                                ,'{{ $key }}' = '{{ $value }}'
                                {{- end }}
                            );

                            INSERT INTO {{ .sink.topic | replace "." "_" }}_sink
                            SELECT * FROM {{ .source.table | replace "." "_" }}_source;
                            EOF

                            # Submit the SQL job
                            SESSION_RESPONSE=$(curl -s -X POST http://${SQLGATEWAY_SERVICE}:${SQLGATEWAY_PORT}/v1/sessions \
                              -H "Content-Type: application/json" \
                              -d '{"sessionName":"{{ .name }}-session"}')

                            echo "Session response: $SESSION_RESPONSE"
                            SESSION_HANDLE=$(echo $SESSION_RESPONSE | grep -o '"session_handle":"[^"]*"' | cut -d':' -f2 | tr -d '"')

                            if [ -z "$SESSION_HANDLE" ] || [ "$SESSION_HANDLE" = "null" ]; then
                                echo "Failed to create session for {{ .name }}"
                                exit 1
                            fi

                            echo "Session created for {{ .name }} with handle: $SESSION_HANDLE"

                            # Execute SQL statements
                            STATEMENT=$(cat /tmp/{{ .name }}.sql | tr '\n' ' ')
                            STATEMENT_RESPONSE=$(curl -s -X POST "http://${SQLGATEWAY_SERVICE}:${SQLGATEWAY_PORT}/v1/sessions/${SESSION_HANDLE}/statements" \
                              -H "Content-Type: application/json" \
                              -d "{\"statement\":\"$STATEMENT\"}")

                            echo "Statement response: $STATEMENT_RESPONSE"
                            echo "Job submitted for {{ .name }}"

                            {{- end }}
                            {{- end }}

                            {{- end }}
                        resources:
                          {{- toYaml .Values.bootstrap.resources | nindent 12 }}
                        volumeMounts:
                          - name: pipeline-definitions
                            mountPath: /pipelines
                          - name: flink-tmp
                            mountPath: /tmp
                        env:
                          - name: MSSQL_USERNAME
                            valueFrom:
                              secretKeyRef:
                                name: {{ .Values.existingSecrets.mssqlCredentials.name }}
                                key: {{ .Values.existingSecrets.mssqlCredentials.usernameKey }}
                          - name: MSSQL_PASSWORD
                            valueFrom:
                              secretKeyRef:
                                name: {{ .Values.existingSecrets.mssqlCredentials.name }}
                                key: {{ .Values.existingSecrets.mssqlCredentials.passwordKey }}
                          - name: KAFKA_USERNAME
                            valueFrom:
                              secretKeyRef:
                                name: {{ .Values.existingSecrets.kafkaCredentials.name }}
                                key: {{ .Values.existingSecrets.kafkaCredentials.usernameKey }}
                          - name: KAFKA_PASSWORD
                            valueFrom:
                              secretKeyRef:
                                name: {{ .Values.existingSecrets.kafkaCredentials.name }}
                                key: {{ .Values.existingSecrets.kafkaCredentials.passwordKey }}
                    volumes:
                      - name: pipeline-definitions
                        configMap:
                          name: {{ include "flink-cdc.fullname" . }}-config
                          items:
                            - key: pipeline-definitions.json
                              path: pipeline-definitions.json
                      - name: flink-tmp
                        emptyDir: {}
              {{- end }}