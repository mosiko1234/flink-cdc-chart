apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "flink-cdc.fullname" . }}-taskmanager
  labels:
    {{- include "flink-cdc.labels" . | nindent 4 }}
    app.kubernetes.io/component: taskmanager
spec:
  replicas: {{ .Values.taskmanager.replicas }}
  selector:
    matchLabels:
      {{- include "flink-cdc.taskmanager.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "flink-cdc.taskmanager.selectorLabels" . | nindent 8 }}
      annotations:
        openshift.io/scc: restricted
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "flink-cdc.serviceAccountName" . }}
      initContainers:
        - name: config-init
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              # Copy config files to writable directory
              mkdir -p /opt/flink/conf /opt/flink/log /opt/flink/plugins/cdc/lib
              cp /config-readonly/flink-conf.yaml /opt/flink/conf/
              cp /config-readonly/log4j-console.properties /opt/flink/conf/
              
              # Make directories writable
              chmod -R 777 /opt/flink/conf /opt/flink/log /opt/flink/lib /opt/flink/plugins /tmp
              
              echo "TaskManager init container setup completed"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: config-readonly
              mountPath: /config-readonly
            - name: flink-conf
              mountPath: /opt/flink/conf
            - name: flink-lib
              mountPath: /opt/flink/lib
            - name: flink-plugins
              mountPath: /opt/flink/plugins
            - name: flink-tmp
              mountPath: /tmp
      containers:
        - name: taskmanager
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
            - |
              echo "Starting taskmanager with custom entrypoint"
              export DISABLE_ENV_CONFIG=true
              export FLINK_PLUGINS_DIR=/opt/flink/plugins
              export JVM_ARGS="-Xmx1024m -Dorg.apache.flink.shaded.netty4.io.netty.tryReflectionSetAccessible=true"
              /opt/flink/bin/taskmanager.sh start-foreground
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          ports:
            - containerPort: {{ .Values.taskmanager.ports.rpc }}
              name: rpc
            - containerPort: {{ .Values.taskmanager.ports.data }}
              name: data
          env:
            - name: FLINK_CONF_DIR
              value: /opt/flink/conf
            - name: DISABLE_ENV_CONFIG
              value: "true"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MSSQL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecrets.mssqlCredentials.name }}
                  key: {{ .Values.existingSecrets.mssqlCredentials.usernameKey }}
            - name: MSSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecrets.mssqlCredentials.name }}
                  key: {{ .Values.existingSecrets.mssqlCredentials.passwordKey }}
            - name: MINIO_ENDPOINT
              value: {{ .Values.externalServices.minio.endpoint | quote }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecrets.minioCredentials.name }}
                  key: {{ .Values.existingSecrets.minioCredentials.accessKeyKey }}
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecrets.minioCredentials.name }}
                  key: {{ .Values.existingSecrets.minioCredentials.secretKeyKey }}
            - name: KAFKA_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecrets.kafkaCredentials.name }}
                  key: {{ .Values.existingSecrets.kafkaCredentials.usernameKey }}
            - name: KAFKA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecrets.kafkaCredentials.name }}
                  key: {{ .Values.existingSecrets.kafkaCredentials.passwordKey }}
            {{- range .Values.extraEnvVars }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.taskmanager.ports.rpc }}
            initialDelaySeconds: 60
            periodSeconds: 60
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: {{ .Values.taskmanager.ports.rpc }}
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 3
          resources:
            {{- toYaml .Values.taskmanager.resources | nindent 12 }}
          volumeMounts:
            - name: flink-conf
              mountPath: /opt/flink/conf
            - name: flink-lib
              mountPath: /opt/flink/lib
            - name: flink-plugins
              mountPath: /opt/flink/plugins
            - name: flink-log
              mountPath: /opt/flink/log
            - name: flink-tmp
              mountPath: /tmp
            {{- if .Values.persistence.enabled }}
            - name: flink-data
              mountPath: /opt/flink/data
            {{- end }}
      volumes:
        - name: config-readonly
          configMap:
            name: {{ include "flink-cdc.fullname" . }}-config
        - name: flink-conf
          emptyDir: {}
        - name: flink-lib
          emptyDir: {}
        - name: flink-plugins
          emptyDir: {}
        - name: flink-log
          emptyDir: {}
        - name: flink-tmp
          emptyDir: {}
        {{- if .Values.persistence.enabled }}
        - name: flink-data
          persistentVolumeClaim:
            claimName: {{ include "flink-cdc.fullname" . }}-data
        {{- end }}